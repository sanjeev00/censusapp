/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package censusapp;

import censusapp.dao.MemberDAO;
import censusapp.services.MemberServiceImpl;
import org.mockito.Mock;
import exceptions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

public class MemberTest {
    public Member member;
    @BeforeEach
    public void setup()
    {
        member = new Member();
    }

    @Test void lengthFirstName()
    {
        String fname = "dasdas asfsafafdsgdsfsd  fdsfasd fafdsgsgsfdgs dfsd f dasdasdadasd";
        assertThrows(LengthExceededException.class,()-> member.setFirstName(fname));
    }

    @Test void lengthMiddleName()
    {
        String mname = "dasdas asfsafafdsgdsfsd  fdsfasd fafdsgsgsfdgs dfsd f dasdasdadasd";
        assertThrows(LengthExceededException.class,()-> member.setFirstName(mname));
    }

    @Test void lengthLastName()
    {
        String lname = "dasdas asfsafafdsgdsfsd  fdsfasd fafdsgsgsfdgs dfsd f dasdasdadasd";
        assertThrows(LengthExceededException.class,()-> member.setFirstName(lname));
    }

    @Test void checkAgeLessThan125() throws Exception {

        assertThrows(MaxAgeExceededException.class,()->member.setDateOfBirth("1888-02-02"));
    }


    @Test void checkAgeNotNegative() throws Exception {
        assertThrows(NegativeAgeException.class,()->member.setDateOfBirth("2024-02-02"));
    }

    @Test
    public void emptyFirstName() {
        String fname = "";
        assertThrows(EmptyFieldException.class,()-> member.setFirstName(fname));
    }

    @Test public void emptyLastName() {
        String lname = "";
        assertThrows(EmptyFieldException.class,()->member.setLastName(lname));
    }

    @Test public void emptyGender() {
        String gender = "";
        assertThrows(EmptyFieldException.class,()->member.setGender(gender));
    }



    @Test public void invalidDate() {
        String dob = "2020-2020";
        assertThrows(InvalidDateException.class,()->member.setDateOfBirth(dob));
    }


    @Test public void testGetMembers()
    {
        MemberDAO memberDAO = mock(MemberDAO.class);
        assertTrue(memberDAO.getMembers().size()==0);

    }

    @Test public void testAddMember(){

        Member member = new Member();
        MemberServiceImpl memberService = mock(MemberServiceImpl.class);
        when(memberService.addMember(member)).thenReturn(true);
        Boolean memberAdded = memberService.addMember(member);

        //verify the implementation
        verify(memberService).addMember(member);


    }



}
